package resources;

import practica2.BinaryTree;

public class TreeTraversal<T> {

    public void inOrderTraversal(BinaryTree<T> node) {
        if (node != null) {
            inOrderTraversal(node.getLeftChild());
            System.out.print(node.getData() + " ");
            inOrderTraversal(node.getRightChild());
        }
    }

    public void preOrderTraversal(BinaryTree<T> node) {
        if (node != null) {
            System.out.print(node.getData() + " ");
            preOrderTraversal(node.getLeftChild());
            preOrderTraversal(node.getRightChild());
        }
    }

    public void postOrderTraversal(BinaryTree<T> node) {
        if (node != null) {
            postOrderTraversal(node.getLeftChild());
            postOrderTraversal(node.getRightChild());
            System.out.print(node.getData() + " ");
        }
    }

    public static void main(String[] args) {
        BinaryTree<Integer> root = new BinaryTree<>(1);
        root.addLeftChild(new BinaryTree<>(2));
        root.addRightChild(new BinaryTree<>(3));
        root.getLeftChild().addLeftChild(new BinaryTree<>(4));
        root.getLeftChild().addRightChild(new BinaryTree<>(5));
        root.getRightChild().addLeftChild(new BinaryTree<>(6));
        root.getRightChild().addRightChild(new BinaryTree<>(7));

        TreeTraversal<Integer> traversal = new TreeTraversal<>();
        
        System.out.println("Inorden:");
        traversal.inOrderTraversal(root);
        System.out.println("\nPreorden:");
        traversal.preOrderTraversal(root);
        System.out.println("\nPostorden:");
        traversal.postOrderTraversal(root);
    }
}
